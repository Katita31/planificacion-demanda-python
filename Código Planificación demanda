# planificacion-demanda-python
Proyecto de Python sobre planificación de la demanda y análisis de forecast con ARIMA.
En este proyecto, se realizará el análisis del forecast del área de planificación y compras.

📌 Objetivo del Código

Se realizará un forecasting (pronóstico) de demanda en el área de compras y planificación utilizando ARIMA, un modelo estadístico para series de tiempo.

El flujo de trabajo será: 1️⃣ Cargar los datos y preprocesarlos.

2️⃣ Visualizar la serie de tiempo.

3️⃣ Aplicar ARIMA para generar el pronóstico.

4️⃣ Visualizar los resultados.

5️⃣ Exportar los datos para usarlos en Power BI.

🔹Explicación de los Conceptos Clave

1️⃣ Series de Tiempo: Datos ordenados cronológicamente, usados para analizar tendencias pasadas y futuras.

2️⃣ ARIMA (p,d,q): Modelo de predicción donde:

p: Autoregresión (cuántos valores pasados usamos).
d: Diferenciación (para estabilizar la serie).
q: Media móvil (cómo usamos los errores pasados).

3️⃣ Forecasting: Proceso de predecir valores futuros basados en patrones históricos.

4️⃣ Visualización: Gráficos para entender mejor la evolución de los datos.

5️⃣ Exportación a CSV: Guardar el pronóstico para integrarlo con Power BI.

# 🛠️ PASO 1: Importar las librerías necesarias
import pandas as pd  # Manipulación de datos
import numpy as np  # Cálculos numéricos
import matplotlib.pyplot as plt  # Gráficos
import seaborn as sns  # Gráficos más bonitos
from statsmodels.tsa.arima.model import ARIMA  # Modelo ARIMA para forecasting

# 📌 PASO 2: Crear o cargar el dataset de demanda (Simulado)
# En la práctica, aquí cargarías un archivo CSV con `pd.read_csv("archivo.csv")`
fechas = pd.date_range(start="2020-01-01", periods=36, freq="ME")  # 36 meses de datos
demanda = np.random.randint(50, 200, size=len(fechas))  # Valores aleatorios de demanda

df = pd.DataFrame({"Fecha": fechas, "Demanda": demanda})  # Crear DataFrame
df.set_index("Fecha", inplace=True)  # Establecer "Fecha" como índice

# 📊 PASO 3: Visualizar la serie de tiempo
plt.figure(figsize=(12, 5))
sns.lineplot(data=df, x=df.index, y="Demanda", marker="o", label="Demanda real")
plt.title("Demanda histórica")
plt.xlabel("Fecha")
plt.ylabel("Cantidad")
plt.grid(True)
plt.legend()
plt.show()

from statsmodels.tsa.arima.model import ARIMA
import pandas as pd
import matplotlib.pyplot as plt

# 🔄 PASO 4: Asegurar que la columna 'Fecha' sea el índice y tenga una frecuencia definida
df.index = pd.to_datetime(df.index)  # Convertimos el índice en tipo datetime
df = df.asfreq("ME")  # Definir la frecuencia como mensual

# 📌 Asegurar que la columna "Demanda" sea numérica
df["Demanda"] = pd.to_numeric(df["Demanda"], errors="coerce")

# 🔄 PASO 5: Definir y entrenar el modelo ARIMA
modelo = ARIMA(df["Demanda"], order=(2, 1, 2))  # ARIMA(p=2, d=1, q=2)
modelo_entrenado = modelo.fit()  # Entrenar el modelo

# 📌 Mostrar resumen del modelo
print(modelo_entrenado.summary())

# 🔮 Generar pronóstico para los próximos 3 meses
fechas_futuras = pd.date_range(start=df.index[-1] + pd.DateOffset(months=1), periods=3, freq="ME")
prediccion = modelo_entrenado.forecast(steps=3)

# 📌 Crear DataFrame con la predicción
df_prediccion = pd.DataFrame({"Fecha": fechas_futuras, "Demanda_Pronosticada": prediccion.values})
df_prediccion.set_index("Fecha", inplace=True)

# 📊 Visualizar los resultados
plt.figure(figsize=(10, 5))
plt.plot(df.index, df["Demanda"], label="Demanda Histórica", marker="o")
plt.plot(df_prediccion.index, df_prediccion["Demanda_Pronosticada"], label="Pronóstico", linestyle="dashed", marker="s", color="red")
plt.xlabel("Fecha")
plt.ylabel("Demanda")
plt.title("📈 Pronóstico de Demanda con ARIMA (2,1,2)")
plt.legend()
plt.grid()
plt.show()

# 📌 Mostrar predicción
print("🔮 Pronóstico de demanda para los próximos 3 meses:")
print(df_prediccion)

# 💾 PASO 8: Exportar los datos a CSV para Power BI
df_prediccion.to_csv("pronostico_demanda.csv")
print("✅ Pronóstico guardado como 'pronostico_demanda.csv'. Listo para Power BI!")




